com.example.loginservice
=================================================================

package com.example.loginservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LoginServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(LoginServiceApplication.class, args);
	}

}


com.example.loginservice.config
===============================================================

package com.example.loginservice.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class PasswordEncoderConfig {
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

package com.example.loginservice.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/login").permitAll()
                // Add other public endpoints here if needed
                .anyRequest().authenticated()
            )
            .formLogin(form -> form.disable())
            .httpBasic(basic -> basic.disable());
            // Optionally, add JWT filter here before UsernamePasswordAuthenticationFilter

        // Uncomment the next line if you want to enable CORS globally (best for APIs)
        // http.cors();

        return http.build();
    }
}

com.example.loginservice.controller
=====================================================
/*
 * package com.example.loginservice.controller;
 * 
 * import com.example.loginservice.dto.LoginRequest; import
 * com.example.loginservice.service.AuthService; import
 * org.springframework.beans.factory.annotation.Autowired; import
 * org.springframework.http.ResponseEntity; import
 * org.springframework.web.bind.annotation.*;
 * 
 * 
 * @RestController
 * 
 * @RequestMapping("/api/login") public class AuthController {
 * 
 * @Autowired private AuthService authService;
 * 
 * @PostMapping public ResponseEntity<?> login(@RequestBody LoginRequest
 * request) { try { String token = authService.login(request); return
 * ResponseEntity.ok().body("Bearer " + token); } catch (Exception e) { return
 * ResponseEntity.status(401).body(e.getMessage()); } } }
 */

package com.example.loginservice.controller;

import com.example.loginservice.dto.LoginRequest;
import com.example.loginservice.service.AuthService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/login")
public class AuthController {

    private final AuthService authService;

    @Autowired
    public AuthController(AuthService authService) {
        this.authService = authService;
    }

    @PostMapping
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        try {
            String token = authService.login(request);
            Map<String, String> body = new HashMap<>();
            body.put("token", token);
            return ResponseEntity.ok(body);
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", e.getMessage());
            return ResponseEntity.status(401).body(error);
        }
    }
}

com.example.loginservice.dto
=============================================================

package com.example.loginservice.dto;

import lombok.Data;

@Data
public class LoginRequest {
    private String username; // or you can use email if you want
    private String password;
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
    
}

com.example.loginservice.entity
==================================================================

package com.example.loginservice.entity;

import jakarta.persistence.*;
import lombok.*;

@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable=false, unique=true)
    private String username;

    @Column(nullable=false)
    private String password;

    @Column(nullable=false, unique=true)
    private String email;
    
    // --- THIS IS THE IMPORTANT PART:
    public User() {}  // <---- Required by JPA!
    
    public User(String username, String password) {
        this.username = username;
        this.password = password;
    }


    public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public String getPassword() {
		return password;
	}

	public String getEmail() {
		return email;
	}

	public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}

com.example.loginservice.repository
=====================================================================

package com.example.loginservice.repository;

import com.example.loginservice.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
    Optional<User> findByEmail(String email);
}

com.example.loginservice.service
============================================================


package com.example.loginservice.service;

import com.example.loginservice.dto.LoginRequest;
import com.example.loginservice.entity.User;
import com.example.loginservice.repository.UserRepository;
import com.example.loginservice.util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class AuthService {

    private final UserRepository userRepository;
    private final JwtUtil jwtUtil;
    private final PasswordEncoder passwordEncoder;

    @Autowired
    public AuthService(UserRepository userRepository, JwtUtil jwtUtil, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.jwtUtil = jwtUtil;
        this.passwordEncoder = passwordEncoder;
    }

    public String login(LoginRequest req) throws Exception {
        User user = userRepository.findByUsername(req.getUsername())
                .orElseThrow(() -> new Exception("User not found"));

        // UNCOMMENT if storing hashed passwords (recommended)
        if (!passwordEncoder.matches(req.getPassword(), user.getPassword())) {
            throw new Exception("Invalid credentials");
        }

        // COMMENT out the below if using passwordEncoder above!
        // if (!req.getPassword().equals(user.getPassword())) {
        //     throw new Exception("Invalid credentials");
        // }

        return jwtUtil.generateToken(user.getUsername());
    }
}

com.example.loginservice.util
================================================================

package com.example.loginservice.util;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import java.security.Key;
import java.util.Date;

@Component
public class JwtUtil {

    private final long EXPIRATION_TIME = 1000 * 60 * 60 * 10; // 10 hours
    private final Key secretKey = Keys.secretKeyFor(SignatureAlgorithm.HS256); // ðŸ”’ In real apps, keep the key safe

    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(secretKey)
                .compact();
    }

    public String extractUsername(String token) {
        return Jwts.parserBuilder().setSigningKey(secretKey).build()
                .parseClaimsJws(token).getBody().getSubject();
    }
}

application.yml
=========================================================

server:
  port: 8082

spring:
  datasource:
    url: jdbc:mysql://localhost:3306/chatapp?useSSL=false&allowPublicKeyRetrieval=true
    username: root 
    password: 123sqlSQL@*#

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect

  application:
    name: login-service

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true


