com.example.chatmessageservice
============================================================
package com.example.chatmessageservice;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ChatMessageServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(ChatMessageServiceApplication.class, args);
	}

}

com.example.chatmessageservice.controller
=================================================================

package com.example.chatmessageservice.controller;

import com.example.chatmessageservice.entity.ChatMessage;
import com.example.chatmessageservice.service.ChatMessageService;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/chat/api/messages")
public class ChatMessageController {

    private final ChatMessageService chatMessageService;

    public ChatMessageController(ChatMessageService chatMessageService) {
        this.chatMessageService = chatMessageService;
    }

    @PostMapping("/send")
    public ChatMessage sendMessage(@RequestBody ChatMessage message) {
        return chatMessageService.sendMessage(message);
    }

    @GetMapping("/conversation/{userA}/{userB}")
    public List<ChatMessage> getConversation(@PathVariable String userA, @PathVariable String userB) {
        return chatMessageService.getConversation(userA, userB);
    }

    @GetMapping("/inbox/{receiver}")
    public List<ChatMessage> getReceivedMessages(@PathVariable String receiver) {
        return chatMessageService.getReceivedMessages(receiver);
    }
}

com.example.chatmessageservice.entity
===========================================================

package com.example.chatmessageservice.entity;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
public class ChatMessage {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String sender;
    private String receiver;
    private String message;
    private LocalDateTime timestamp;

    // Default constructor
    public ChatMessage() {}

    
    // All-args constructor
    public ChatMessage(Long id, String sender, String receiver, String message, LocalDateTime timestamp) {
        this.id = id;
        this.sender = sender;
        this.receiver = receiver;
        this.message = message;
        this.timestamp = timestamp;
    }

    // Getters and Setters
    public Long getId() { 
    	return id; 
    }
    public void setId(Long id) { this.id = id; }

    public String getSender() { return sender; }
    public void setSender(String sender) { this.sender = sender; }

    public String getReceiver() { return receiver; }
    public void setReceiver(String receiver) { this.receiver = receiver; }

    public String getMessage() { return message; }
    public void setMessage(String message) { this.message = message; }

    public LocalDateTime getTimestamp() { return timestamp; }
    
    public void setTimestamp(LocalDateTime timestamp) {
        this.timestamp = timestamp;
    }
}

com.example.chatmessageservice.repository
================================================================

package com.example.chatmessageservice.repository;

import com.example.chatmessageservice.entity.ChatMessage;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.List;

public interface ChatMessageRepository extends JpaRepository<ChatMessage, Long> {
    List<ChatMessage> findBySenderAndReceiverOrReceiverAndSender(String sender, String receiver, String receiver2, String sender2);
    List<ChatMessage> findByReceiver(String receiver);
}

com.example.chatmessageservice.service
=============================================================

package com.example.chatmessageservice.service;

import com.example.chatmessageservice.entity.ChatMessage;
import com.example.chatmessageservice.repository.ChatMessageRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

@Service
public class ChatMessageService {
    private final ChatMessageRepository chatMessageRepository;

    public ChatMessageService(ChatMessageRepository chatMessageRepository) {
        this.chatMessageRepository = chatMessageRepository;
    }

    public ChatMessage sendMessage(ChatMessage message) {
        message.setTimestamp(LocalDateTime.now());
        return chatMessageRepository.save(message);
    }

    public List<ChatMessage> getConversation(String userA, String userB) {
        return chatMessageRepository
                .findBySenderAndReceiverOrReceiverAndSender(userA, userB, userA, userB);
    }

    public List<ChatMessage> getReceivedMessages(String receiver) {
        return chatMessageRepository.findByReceiver(receiver);
    }
}

application.yml
======================================================================
spring:
  application:
    name: chat-message-service
  datasource:
    url: jdbc:mysql://localhost:3306/chatapp
    username: root
    password: 123sqlSQL@*#
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

server:
  port: 8084

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true
